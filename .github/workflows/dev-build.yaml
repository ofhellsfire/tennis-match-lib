name: Dev Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:

  black-formatting-check:
    name: Black Formatting Check
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: psf/black@stable
        with:
          args: black --color ./tennis_match_lib/

  pylint-check:
    name: Pylint Check
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: cclauss/GitHub-Action-for-pylint@master
        with:
          args: pylint ./tennis_match_lib

  unit-tests:
    name: Unit Testing
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -vvs --cov=tennis_match_lib --cov-report term-missing

  # build:
  #   name: Build tool
  #   runs-on: ${{ matrix.os }}
  #   needs: black-formatting-check
  #   strategy:
  #     matrix:
  #       os:
  #         - 'ubuntu-latest'
  #         - 'windows-latest'
  #       python-version:
  #         - '3.7'
  #         - '3.8'
  #         - '3.9'
